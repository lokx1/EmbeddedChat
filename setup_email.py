"""
Email Setup Script
H∆∞·ªõng d·∫´n v√† ki·ªÉm tra c·∫•u h√¨nh email
"""
import os
import sys
import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import aiosmtplib
from typing import Dict, Any

# Add backend src to path
sys.path.append(os.path.join(os.path.dirname(__file__), "backend", "src"))

from core.email_config import email_settings


class EmailSetupGuide:
    """Guide for setting up email configuration"""
    
    def __init__(self):
        self.config = email_settings
    
    def print_setup_guide(self):
        """Print detailed setup guide"""
        print("=" * 60)
        print("üìß EMAIL SETUP GUIDE - EmbeddedChat")
        print("=" * 60)
        print()
        
        print("üîß B∆Ø·ªöC 1: C·∫•u h√¨nh .env file")
        print("-" * 40)
        print("C·∫≠p nh·∫≠t file backend/.env v·ªõi c√°c th√¥ng tin sau:")
        print()
        print("# Email Configuration")
        print("SMTP_SERVER=smtp.gmail.com")
        print("SMTP_PORT=587")
        print("SMTP_USE_TLS=true")
        print("SMTP_USERNAME=your-email@gmail.com")
        print("SMTP_PASSWORD=your-app-password")
        print("SMTP_FROM_EMAIL=your-email@gmail.com")
        print("SMTP_FROM_NAME=EmbeddedChat System")
        print()
        
        print("üìß B∆Ø·ªöC 2: Thi·∫øt l·∫≠p Gmail App Password")
        print("-" * 40)
        print("1. ƒêƒÉng nh·∫≠p v√†o Gmail account c·ªßa b·∫°n")
        print("2. V√†o Google Account Settings")
        print("3. Security > 2-Step Verification")
        print("4. App passwords > Generate password")
        print("5. Ch·ªçn 'Mail' v√† 'Other' (Custom name)")
        print("6. Copy password v√† paste v√†o SMTP_PASSWORD")
        print()
        
        print("üîê B∆Ø·ªöC 3: C√°c nh√† cung c·∫•p email kh√°c")
        print("-" * 40)
        print("Gmail:")
        print("  SMTP_SERVER=smtp.gmail.com")
        print("  SMTP_PORT=587")
        print("  SMTP_USE_TLS=true")
        print()
        print("Outlook/Hotmail:")
        print("  SMTP_SERVER=smtp-mail.outlook.com")
        print("  SMTP_PORT=587")
        print("  SMTP_USE_TLS=true")
        print()
        print("Yahoo:")
        print("  SMTP_SERVER=smtp.mail.yahoo.com")
        print("  SMTP_PORT=587")
        print("  SMTP_USE_TLS=true")
        print()
        
        print("‚ö†Ô∏è  L∆ØU √ù B·∫¢O M·∫¨T")
        print("-" * 40)
        print("- Kh√¥ng commit file .env v√†o git")
        print("- S·ª≠ d·ª•ng App Password thay v√¨ password ch√≠nh")
        print("- B·∫≠t 2-Step Verification")
        print("- Ki·ªÉm tra firewall/antivirus")
        print()
    
    def check_current_config(self):
        """Check current email configuration"""
        print("üîç KI·ªÇM TRA C·∫§U H√åNH HI·ªÜN T·∫†I")
        print("-" * 40)
        
        config_status = {
            "SMTP Server": self.config.smtp_server,
            "SMTP Port": self.config.smtp_port,
            "Use TLS": self.config.smtp_use_tls,
            "Username": self.config.smtp_username,
            "Password": "***" if self.config.smtp_password else "‚ùå CH∆ØA C·∫§U H√åNH",
            "From Email": self.config.smtp_from_email,
            "From Name": self.config.smtp_from_name
        }
        
        for key, value in config_status.items():
            status = "‚úÖ" if value and value != "‚ùå CH∆ØA C·∫§U H√åNH" else "‚ùå"
            print(f"{status} {key}: {value}")
        
        print()
        is_valid = self.config.validate_config()
        if is_valid:
            print("‚úÖ C·∫•u h√¨nh email h·ª£p l·ªá!")
        else:
            print("‚ùå C·∫•u h√¨nh email ch∆∞a ƒë·∫ßy ƒë·ªß!")
        
        return is_valid
    
    async def test_smtp_connection(self):
        """Test SMTP connection"""
        print("üß™ KI·ªÇM TRA K·∫æT N·ªêI SMTP")
        print("-" * 40)
        
        try:
            smtp_config = self.config.get_smtp_config()
            
            print(f"K·∫øt n·ªëi t·ªõi {smtp_config['hostname']}:{smtp_config['port']}...")
            
            smtp = aiosmtplib.SMTP(
                hostname=smtp_config['hostname'],
                port=smtp_config['port'],
                use_tls=smtp_config['use_tls'],
                timeout=smtp_config['timeout']
            )
            
            await smtp.connect()
            print("‚úÖ K·∫øt n·ªëi SMTP th√†nh c√¥ng!")
            
            await smtp.login(
                smtp_config['username'],
                smtp_config['password']
            )
            print("‚úÖ X√°c th·ª±c SMTP th√†nh c√¥ng!")
            
            await smtp.quit()
            print("‚úÖ Ng·∫Øt k·∫øt n·ªëi SMTP th√†nh c√¥ng!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi SMTP: {str(e)}")
            print("\nüõ†Ô∏è  C√ÅCH KH·∫ÆC PH·ª§C:")
            print("1. Ki·ªÉm tra username/password")
            print("2. Ki·ªÉm tra App Password (Gmail)")
            print("3. Ki·ªÉm tra firewall/antivirus")
            print("4. Th·ª≠ c·ªïng kh√°c (465 cho SSL)")
            return False
    
    async def send_test_email(self, to_email: str):
        """Send test email"""
        print(f"üì§ G·ª¨I EMAIL KI·ªÇM TRA T·ªöI: {to_email}")
        print("-" * 40)
        
        try:
            # Create test email
            message = MIMEMultipart("alternative")
            message["Subject"] = "üß™ Test Email - EmbeddedChat Setup"
            message["From"] = f"{self.config.smtp_from_name} <{self.config.smtp_from_email}>"
            message["To"] = to_email
            
            # HTML content
            html_content = """
            <html>
                <body style="font-family: Arial, sans-serif; margin: 20px;">
                    <h2 style="color: #2e7d32;">‚úÖ Email Setup Successful!</h2>
                    <p>Ch√∫c m·ª´ng! C·∫•u h√¨nh email c·ªßa b·∫°n ƒë√£ ho·∫°t ƒë·ªông ch√≠nh x√°c.</p>
                    <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 15px 0;">
                        <h3>üìä Th√¥ng tin h·ªá th·ªëng:</h3>
                        <ul>
                            <li><strong>Service:</strong> EmbeddedChat Email Report</li>
                            <li><strong>SMTP Server:</strong> {smtp_server}</li>
                            <li><strong>From:</strong> {from_email}</li>
                            <li><strong>Time:</strong> {timestamp}</li>
                        </ul>
                    </div>
                    <p><em>B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng Email Report Service ƒë·ªÉ g·ª≠i b√°o c√°o workflow!</em></p>
                </body>
            </html>
            """.format(
                smtp_server=self.config.smtp_server,
                from_email=self.config.smtp_from_email,
                timestamp=asyncio.get_event_loop().time()
            )
            
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Send email
            smtp_config = self.config.get_smtp_config()
            
            await aiosmtplib.send(
                message,
                hostname=smtp_config['hostname'],
                port=smtp_config['port'],
                use_tls=smtp_config['use_tls'],
                username=smtp_config['username'],
                password=smtp_config['password'],
                timeout=smtp_config['timeout']
            )
            
            print("‚úÖ G·ª≠i email ki·ªÉm tra th√†nh c√¥ng!")
            print(f"üìß Ki·ªÉm tra h·ªôp th∆∞: {to_email}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i email: {str(e)}")
            return False


async def main():
    """Main setup function"""
    setup_guide = EmailSetupGuide()
    
    # Print setup guide
    setup_guide.print_setup_guide()
    
    # Check current config
    is_valid = setup_guide.check_current_config()
    
    if not is_valid:
        print("\n‚ö†Ô∏è  Vui l√≤ng c·∫•u h√¨nh email trong file .env tr∆∞·ªõc khi ti·∫øp t·ª•c!")
        return
    
    # Test SMTP connection
    print()
    connection_ok = await setup_guide.test_smtp_connection()
    
    if not connection_ok:
        return
    
    # Ask for test email
    print()
    test_email = input("üìß Nh·∫≠p email ƒë·ªÉ g·ª≠i th·ª≠ (Enter ƒë·ªÉ b·ªè qua): ").strip()
    
    if test_email:
        await setup_guide.send_test_email(test_email)
    
    print()
    print("üéâ SETUP HO√ÄN T·∫§T!")
    print("-" * 40)
    print("B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:")
    print("1. Kh·ªüi ƒë·ªông backend: cd backend && python -m uvicorn src.main:app --reload")
    print("2. Kh·ªüi ƒë·ªông frontend: cd frontend && npm start")
    print("3. S·ª≠ d·ª•ng Email Report Panel trong UI")
    print("4. G·ªçi API endpoints ƒë·ªÉ g·ª≠i b√°o c√°o")


if __name__ == "__main__":
    asyncio.run(main())
