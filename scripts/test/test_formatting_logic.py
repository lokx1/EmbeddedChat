#!/usr/bin/env python3
"""
Quick test of AI Processing formatting logic  
"""
import sys
sys.path.append('d:/EmbeddedChat/backend/src')

def test_ai_formatting():
    print("üîß Testing AI formatting logic...")
    
    # Import the component class
    from services.workflow.component_registry import AIProcessingComponent
    
    # Create test data similar to actual workflow output
    test_processed_results = [
        {
            "row_index": 1,
            "input_data": {
                "Name": "Pha cafe",
                "Task": "T·∫°o ra c√¢u chuy·ªán v·ªÅ pha cafe",
                "Prompt": ""  # Empty prompt column
            },
            "ai_response": {
                "ai_response": "C√¢u chuy·ªán v·ªÅ pha cafe: Trong kh√¥ng gian ·∫•m c√∫ng c·ªßa qu√°n cafe nh·ªè, barista kh√©o l√©o ƒë·ªï n∆∞·ªõc n√≥ng v√†o filter, t·∫°o n√™n nh·ªØng gi·ªçt cafe ƒëen ƒë·∫≠m ƒë√†. M√πi h∆∞∆°ng quy·∫øn r≈© lan t·ªèa kh·∫Øp kh√¥ng gian..."
            },
            "status": "success",
            "provider": "ollama",
            "model": "llama3.2"
        },
        {
            "row_index": 2, 
            "input_data": {
                "Name": "ƒê·ªçc s√°ch",
                "Task": "T·∫°o ra c√¢u chuy·ªán v·ªÅ ƒë·ªçc s√°ch",
                "Prompt": ""
            },
            "ai_response": {
                "ai_response": "C√¢u chuy·ªán v·ªÅ ƒë·ªçc s√°ch: D∆∞·ªõi √°nh ƒë√®n v√†ng ·∫•m √°p, c√¥ g√°i tr·∫ª l·∫≠t t·ª´ng trang s√°ch m·ªôt c√°ch nh·∫π nh√†ng. Nh·ªØng d√≤ng ch·ªØ nh∆∞ nh·ªØng c√°nh c·ª≠a m·ªü ra th·∫ø gi·ªõi m·ªõi..."
            },
            "status": "success",
            "provider": "ollama", 
            "model": "llama3.2"
        }
    ]
    
    # Create AI Processing component instance
    ai_component = AIProcessingComponent()
    
    # Test the formatting method
    print("üîÑ Calling _format_ai_results_for_sheets...")
    formatted_data = ai_component._format_ai_results_for_sheets(test_processed_results)
    
    print(f"\nüìä Formatted data structure:")
    print(f"   Total rows: {len(formatted_data)}")
    
    if len(formatted_data) > 0:
        headers = formatted_data[0]
        print(f"   Headers: {headers}")
        
        # Check if Prompt column exists
        if "Prompt" in headers:
            prompt_index = headers.index("Prompt")
            print(f"   ‚úÖ Prompt column found at index: {prompt_index}")
            
            # Check data rows
            for i, row in enumerate(formatted_data[1:], 1):
                if len(row) > prompt_index:
                    prompt_content = row[prompt_index]
                    print(f"   Row {i} Prompt: '{prompt_content[:100]}...' (length: {len(prompt_content)})")
                    
                    if prompt_content and len(prompt_content) > 10:
                        print(f"   ‚úÖ Row {i}: SUCCESS - Prompt has content!")
                    else:
                        print(f"   ‚ùå Row {i}: FAIL - Prompt is empty")
                else:
                    print(f"   ‚ùå Row {i}: FAIL - Row too short")
        else:
            print(f"   ‚ùå FAIL: No Prompt column found in headers")
    else:
        print(f"   ‚ùå FAIL: No formatted data returned")
    
    return formatted_data

if __name__ == "__main__":
    test_ai_formatting()
