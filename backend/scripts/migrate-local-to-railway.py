#!/usr/bin/env python3
"""
Script ƒë·ªÉ migrate data t·ª´ local PostgreSQL sang Railway PostgreSQL
"""

import os
import subprocess
import sys
import tempfile
from pathlib import Path

def run_command(command, description):
    """Ch·∫°y command v√† hi·ªÉn th·ªã output"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} th√†nh c√¥ng")
            return result.stdout
        else:
            print(f"‚ùå {description} th·∫•t b·∫°i:")
            print(result.stderr)
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi {description}: {e}")
        return None

def get_local_db_info():
    """L·∫•y th√¥ng tin database local t·ª´ user"""
    print("üìã Nh·∫≠p th√¥ng tin PostgreSQL local:")
    
    host = input("Host (localhost): ").strip() or "localhost"
    port = input("Port (5432): ").strip() or "5432"
    database = input("Database name: ").strip()
    username = input("Username: ").strip()
    password = input("Password: ").strip()
    
    return {
        'host': host,
        'port': port,
        'database': database,
        'username': username,
        'password': password
    }

def export_local_database(db_info):
    """Export database local"""
    # T·∫°o file backup t·∫°m th·ªùi
    backup_file = tempfile.NamedTemporaryFile(suffix='.sql', delete=False)
    backup_file.close()
    
    # T·∫°o command pg_dump
    pg_dump_cmd = f"pg_dump -h {db_info['host']} -p {db_info['port']} -U {db_info['username']} -d {db_info['database']} -f {backup_file.name}"
    
    # Set password environment variable
    env = os.environ.copy()
    env['PGPASSWORD'] = db_info['password']
    
    print(f"üîÑ Exporting database {db_info['database']}...")
    try:
        result = subprocess.run(pg_dump_cmd, shell=True, env=env, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Export th√†nh c√¥ng: {backup_file.name}")
            return backup_file.name
        else:
            print(f"‚ùå Export th·∫•t b·∫°i:")
            print(result.stderr)
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi export: {e}")
        return None

def check_railway_cli():
    """Ki·ªÉm tra Railway CLI"""
    result = run_command("railway --version", "Ki·ªÉm tra Railway CLI")
    return result is not None

def get_railway_db_url():
    """L·∫•y DATABASE_URL t·ª´ Railway"""
    result = run_command("railway variables", "L·∫•y Railway variables")
    if result:
        for line in result.split('\n'):
            if 'DATABASE_URL' in line:
                return line.split('=')[1].strip()
    return None

def import_to_railway(backup_file):
    """Import data v√†o Railway PostgreSQL"""
    print("üîÑ Importing data v√†o Railway...")
    
    # SSH v√†o Railway v√† import
    import_cmd = f"railway shell -c 'psql $DATABASE_URL < {backup_file}'"
    
    try:
        result = subprocess.run(import_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Import th√†nh c√¥ng")
            return True
        else:
            print(f"‚ùå Import th·∫•t b·∫°i:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi import: {e}")
        return False

def test_railway_connection():
    """Test k·∫øt n·ªëi Railway database"""
    test_script = """
import asyncio
import os
from src.models.database import engine

async def test_db():
    try:
        async with engine.begin() as conn:
            result = await conn.execute('SELECT 1')
            print('‚úÖ Railway database connection successful!')
            return True
    except Exception as e:
        print(f'‚ùå Railway database connection failed: {e}')
        return False

asyncio.run(test_db())
"""
    
    # T·∫°o file test t·∫°m th·ªùi
    test_file = tempfile.NamedTemporaryFile(suffix='.py', delete=False, mode='w')
    test_file.write(test_script)
    test_file.close()
    
    # Ch·∫°y test
    result = run_command(f"python {test_file.name}", "Test Railway database connection")
    
    # X√≥a file test
    os.unlink(test_file.name)
    
    return result is not None

def main():
    """Main function"""
    print("üöÄ Migration t·ª´ Local PostgreSQL sang Railway")
    print("=" * 50)
    
    # B∆∞·ªõc 1: Ki·ªÉm tra Railway CLI
    if not check_railway_cli():
        print("‚ùå Railway CLI ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc:")
        print("npm install -g @railway/cli")
        return
    
    # B∆∞·ªõc 2: L·∫•y th√¥ng tin database local
    db_info = get_local_db_info()
    
    # B∆∞·ªõc 3: Export database local
    backup_file = export_local_database(db_info)
    if not backup_file:
        print("‚ùå Kh√¥ng th·ªÉ export database local")
        return
    
    # B∆∞·ªõc 4: Ki·ªÉm tra Railway database URL
    railway_db_url = get_railway_db_url()
    if not railway_db_url:
        print("‚ùå Kh√¥ng t√¨m th·∫•y DATABASE_URL trong Railway")
        print("Vui l√≤ng c·∫•u h√¨nh DATABASE_URL tr∆∞·ªõc:")
        print("railway variables set DATABASE_URL='your-railway-db-url'")
        return
    
    print(f"üìã Railway DATABASE_URL: {railway_db_url}")
    
    # B∆∞·ªõc 5: Import v√†o Railway
    if import_to_railway(backup_file):
        print("‚úÖ Migration ho√†n t·∫•t!")
        
        # B∆∞·ªõc 6: Test k·∫øt n·ªëi
        if test_railway_connection():
            print("üéâ Migration th√†nh c√¥ng! Railway database ƒë√£ s·∫µn s√†ng.")
        else:
            print("‚ö†Ô∏è Migration ho√†n t·∫•t nh∆∞ng c√≥ v·∫•n ƒë·ªÅ v·ªõi k·∫øt n·ªëi database.")
    else:
        print("‚ùå Migration th·∫•t b·∫°i")
    
    # X√≥a file backup
    try:
        os.unlink(backup_file)
        print(f"üóëÔ∏è ƒê√£ x√≥a file backup: {backup_file}")
    except:
        pass

if __name__ == "__main__":
    main()
